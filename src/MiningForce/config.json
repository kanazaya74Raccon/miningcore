{
  "logging": {
    "level": "info",
    "enableConsoleLog": true,
    "enableConsoleColors": true,
    "logFile": ""
  },

  "pools": [{
      "enabled": true,

      "coin": {
          "type": "bitcoin"
      },

      "authorizer": "addressbased",

      // Address to where block rewards are given (pool wallet)
      "address": "mjHpWQXfRKNfRDfuYWSYAtZhoWibuVUKGJ",

      /* Block rewards go to the configured pool wallet address to later be paid out to miners,
      except for a percentage that can go to, for examples, pool operator(s) as pool fees or
      or to donations address. Addresses or hashed public keys can be used. Here is an example
      of rewards going to the main pool op */
      "rewardRecipients": [
        { "type": "op", "address": "mmdakU16B8nCvzWNfnFYpRBFhNKRiCDVmq", "percentage": 1.5 }
      ],

      "blockRefreshInterval": 1000, // How often to poll RPC daemons for new blocks, in milliseconds

      /* Some miner apps will consider the pool dead/offline if it doesn't receive anything new jobs
      for around a minute, so every time we broadcast jobs, set a timeout to rebroadcast
      in this many seconds unless we find a new job. Set to zero or remove to disable this. */
      "jobRebroadcastTimeout": 55,

      /* Some attackers will create thousands of workers that use up all available socket connections,
      usually the workers are zombies and don't submit shares after connecting. This features
      detects those and disconnects them. */
      "clientConnectionTimeout": 600, // Remove workers that haven't been in contact for this many seconds

      /* If a worker is submitting a high threshold of invalid shares we can temporarily ban their IP
      to reduce system/network load. Also useful to fight against flooding attacks. If running
      behind something like HAProxy be sure to enable 'tcpProxyProtocol', otherwise you'll end up
      banning your own IP address (and therefore all workers). */
      "banning": {
          "enabled": true,
          "time": 600, // How many seconds to ban worker for
          "invalidPercent": 50, // What percent of invalid shares triggers ban
          "checkThreshold": 500, // Check invalid percent when this many shares have been submitted
          "purgeInterval": 300 // Every this many seconds clear out the list of old bans
      },

      /* Each pool can have as many ports for your miners to connect to as you wish. Each port can
      be configured to use its own pool difficulty and variable difficulty settings. varDiff is
      optional and will only be used for the ports you configure it for. */
      "ports": {
          "3032": { // A port for your miners to connect to
              "difficulty": 0.1, // the pool difficulty for this port

              /* Variable difficulty is a feature that will automatically adjust difficulty for
              individual miners based on their hashrate in order to lower networking overhead */
              "varDiff": {
                  "minDiff": 0.1, // Minimum difficulty
                  "maxDiff": 512, // Network difficulty will be used if it is lower than this
                  "targetTime": 15, // Try to get 1 share per this many seconds
                  "retargetTime": 90, // Check to see if we should retarget every this many seconds
                  "variancePercent": 30 // Allow time to very this % from target without retargeting
              }
          },
          "3256": { //  Another port for your miners to connect to, this port does not use varDiff
              "difficulty": 0.1 // 256 //  The pool difficulty
          }
      },

      /* Recommended to have at least two daemon instances running in case one drops out-of-sync
      or offline. For redundancy, all instances will be polled for block/transaction updates
      and be used for submitting blocks. Creating a backup daemon involves spawning a daemon
      using the "-datadir=/backup" argument which creates a new daemon instance with it's own
      RPC config. For more info on this see:
          - https:// en.bitcoin.it/wiki/Data_directory
          - https:// en.bitcoin.it/wiki/Running_bitcoind */
      "daemons": [{
              "host": "127.0.0.1",
              "port": 19001, // 18332 = testnet, 19001 = regtest (bob)
              "user": "user",
              "password": "pass"
          }
      ],

      "paymentProcessing": {
          "enabled": true,
          "daemon": {
              "host": "127.0.0.1",
              "port": 19001, // 18332 = testnet, 19001 = regtest (bob)
              "user": "user",
              "password": "pass"
          },
          "minimumPayment": 0.1,
          "paymentInterval": 600
      },

      "database": {
          "host": "127.0.0.1",
          "port": 5432,
          "user": "lmp",
          "password": "Qx6SJcOOlfVyoR66nZH1",
          "database": "lmp"
      }
    }
  ]
}